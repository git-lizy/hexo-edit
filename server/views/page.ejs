<link rel="stylesheet" href="/css/editormd.min.css" />
<link rel="stylesheet" href="/css/editor.css" />
<script src="/editormd.min.js"></script>
<script src="/js/hintDialog.js"></script>
<script src="/js/dateFormat.js"></script>
<script src="/js/uploadImg.js"></script>
<script src="/js/base.js"></script>
<div class="page-left">
    <div id="blog-group">
        <% pages.forEach(function(page){ %>
            <a href="javascript:void(0)" data-href="<%= page %>" class="list-group-item" page style="position: relative;"><%= page %></a>
        <% }); %>
    </div>
    <div class="btn-bottom-box">
        <a name="new" href="javascript:void(0)" data-href="shell?action=new_page" wss type="button" class="btn btn-default">新增</a>
        <a name="delete" href="javascript:void(0)" data-href="shell?action=delete_page" wss type="button" class="btn btn-default" page-id="#">删除</a>
    </div>
</div>
<div class="btn-group"> 
    <div class="el-form-item__content">
        <div class="input__title flex1 el-input">
            <span>博客管理：</span><input type="text" autocomplete="off" id="pageTitle" page-id="#" maxlength="100" placeholder="2020-11-18" class="el-input__inner"/>
            <!-- <span class="el-input__suffix"><span class="el-input__suffix-inner">
            <span class="el-input__count"><span class="el-input__count-inner">10/100</span></span></span>
            </span> -->
        </div>
        <div class="article-bar__user-box flex flex--row flex--align-center">
            <button type="button" class="el-button btn btn-save el-button-save">保存</button>
            <button type="button" class="el-button btn btn-publish el-button-primary">发布</button>
        </div>
    </div>
    <div id="editor">
    </div>
</div>
<script>
    $("a[page]").bind("click", getPage);
    firstClickItem();
    $("a[wss]").bind("click", function (e) {
        e.preventDefault();
        let href = $(this).attr("data-href");
        switch ($(this).attr("name")) {
            case "new":
                let name = '博客' + dateFormat('mmss');
                $.get(href, {
                    page: name
                }, function (data, status) {
                    if (status === "success" && data.success) {
                        addNode(data);
                    }
                }, 'json');
                break;
            case "delete":
                let that = this;
                $.MsgBox.Confirm('温馨提示！', '确认删除当前博客？', function() {
                    let pId = $(that).attr("page-id")
                    $.get(href, {
                        page: pId
                    }, function (data, status) {
                        if (status === "success" && data.success) {
                            deleteNode(data.pId);
                            swal(data.msg, 'success');
                        }
                    }, 'json');
                });
                break;
            default:
                swal("未知操作", "error");
                break;
        }
        return false;
    });
    $(".btn-save").click(function () {
        savePage(true);
    });

    function getPage(e) {
        let pageId = $(this).attr("data-href");
        $.get('getPage', {
            page: pageId
        }, function (data, status, xhr) {
            if (status === "success" && data.success) {
                toggleStyle(e, pageId);
                if (window.pageEditor) {
                    window.pageEditor = window.pageEditor.setMarkdown(data.data);
                    window.pageEditor.resize();
                } else {
                    registerMarkdown(data.data);
                }
                $('#pageTitle').val('');
                $('a[page-id]').attr("page-id", pageId);
                let autoSaveTime = <%= autoSave %> ;
                if (autoSaveTime) {
                    if (window.autoSave) clearInterval(window.autoSave);
                    window.autoSave = setInterval(() => {
                        savePage(false);
                    }, autoSaveTime);
                }
            } else {
                swal("\n获取页面失败", "error");
            }
        });
        $.get('shell?action=get_pagename', {
            page: pageId
        });
    }

    $(".btn-publish").click(function () {
        $.get("shell?action=clean", function (data, status, xhr) {
            if (status === "success") {  
                $.get("shell?action=generate", function (data, status, xhr) {
                    if (status === "success") {
                        $('.editormd-container-mask').show();
                        setTimeout(()=> { 
                            $('.editormd-container-mask').hide();
                            swal('发布成功', 'success'); 
                        }, 2000);
                    }
                });
            }
        })
    });
    
    function deleteNode(id) {
        $('#blog-group a[data-href="'+id+'"]').remove();
        firstClickItem();
    }

    function firstClickItem() {
        $("a[page]")[0] && $("a[page]")[0].click();
    }

    function addNode(data) {
        let a = document.createElement('a');
        a.href = "javascript:void(0)";
        a.className = "list-group-item";
        a.setAttribute('data-href', data.name);
        a.setAttribute('page', '');
        a.style = "position: relative;display:none;";
        a.innerText = data.name;
        $('#blog-group').append(a);
        $(a).bind('click', getPage);
        $('.editormd-container-mask').show();
        setTimeout( () => {
            swal(data.msg, 'success');
            $(a).show();
            $('.editormd-container-mask').hide();
            $(a).click();
        }, 1500);
    }

    function toggleStyle(e, pId) {
        $(".list-group-item").removeClass("active");
        $(e.target).addClass("active");
        let titleEl = document.getElementById('pageTitle');
        let title = pId || '#';
        $(titleEl).attr('page-id', title);
        $(titleEl).attr('placeholder', title);
    }

    function registerMarkdown(data) {
        window.pageEditor = editormd('editor', {
            width: "100%",
            height: "95%",
            markdown: data, // dynamic set Markdown text
            path: "/lib/", // Autoload modules mode, codemirror, marked... dependents libs path
            onload : function() {
                initPasteDragImg(this);
            }
        });
    }

    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.which === 83) {
            e.preventDefault();
            nextTick(() => {
                savePage(true);
            }) 
        }
    })

    function savePage(isHint) {
        let currentEl = $(".list-group-item.active");
        let titleEl = $('#pageTitle');
        let old_name = $(titleEl).attr('page-id');
        let val = $(titleEl).val();
        if (val && old_name !== val) {
            $.ajax({
                url: 'shell?action=rename_page',
                data: {
                    old_name: old_name,
                    new_name: val
                },
                type: 'get',
                success : function(data) {
                    let name = data.new_name;
                    $(titleEl).attr('page-id', name);
                    $(currentEl).text(name);
                    $(currentEl).attr("data-href", name);
                    $.post('shell?action=save_page', {
                        page: name,
                        data: $(".editormd-markdown-textarea").val()
                    }, function(data, status) {
                        if (status === "success" && data.success) {
                            if(isHint) swal(data.msg, 'success');
                        }
                    });
                }
            })
        } else {
            $.post('shell?action=save_page', {
                page: $(currentEl).text(),
                data: $(".editormd-markdown-textarea").val()
            }, function(data, status) {
                if (status === "success" && data.success) {
                    if(isHint) swal(data.msg, 'success');
                }
            });
        }
    }
</script>